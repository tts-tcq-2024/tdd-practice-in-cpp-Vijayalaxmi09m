Section,Content
Purpose,The purpose of this document is to define the test cases for validating the behavior of the StringCalculator class.
Scope,"This test specification covers unit testing for handling empty strings. Summing numbers separated by delimiters. supporting custom delimiters and handling edge cases such as negative numbers and numbers greater than 1000."
Test Environment,"Development Language: C++ Testing Framework: GoogleTest OS: [Your OS], Compiler: [Your Compiler]"
Test Case ID,Test Description,Input,Expected Output,Expected Behavior
TC01,Return 0 for an empty string input.,"""""",0,The method returns 0 when no numbers are provided.
TC02,Return 0 for a single zero as input.,"""0""",0,The method returns 0 when the input is '0'.
TC03,Return sum for two comma-separated numbers.,"""1,2""",3,The method sums two numbers and returns the result (1 + 2 = 3).
TC04,Throw exception for negative numbers in input.,"""-1,2""",Throws runtime_error,The method throws an exception for any negative number.
TC05,Return sum for numbers with a newline delimiter.,"""1\n2,3""",6,The method correctly parses and sums numbers delimited by newlines or commas.
TC06,Ignore numbers greater than 1000 in the input.,"""1,1001""",1,The method ignores numbers greater than 1000 when calculating the sum.
TC07,Support custom delimiters for adding numbers.,"""//;\n1;2""",3,"The method correctly parses and sums numbers using custom delimiters defined by the user (e.g., ';')."
Test Execution Procedures,"1. Compile the StringCalculator code and unit tests. 2. Run the unit tests using the GoogleTest framework. 3. Validate that all test cases pass, and the actual output matches the expected output. 4. Log any failures or discrepancies and re-execute the tests after fixes."
Results and Reporting,"Upon execution, the test results will be recorded as either 'Pass' or 'Fail'. Failures will be logged for further investigation and corrective action."
